- name: Install docker
  gather_facts: No
  any_errors_fatal: true
  hosts: _ansible_postgresql
  become: true
  vars_files:
    - secret.yml
  tasks:
    - name: upgrade all packages
      yum: 
        name: '*'
        state: latest
    # Above task makes upgrading yum packages (sudo yum upgrade..)
    #Â Below we may need to uninstall any existing docker files from the centos repo first. 
    # If there are some files related to docker they are uninstalled
    # item with jinja is a variable and with_items a loop for this job
    # we can also use loop in place with_items, about the same.. 
    - name: Remove docker if installed from CentOS repo
      yum:
        name: "{{ item }}"
        state: removed
      with_items:
        - docker
        - docker-client
        - docker-client-latest
        - docker-common
        - docker-latest
        - docker-latest-logrotate
        - docker-logrotate
        - docker-engine
    - name: Install yum utils
      yum:
        name: "{{ item }}"
        state: latest
      with_items:
        - yum-utils
        - device-mapper-persistent-data
        - lvm2
  # yum-utils is a collection of tools and programs for managing yum repositories, 
  # installing debug packages, source packages, extended information from repositories and administration.
    - name: Add Docker repo
      get_url:
        url: https://download.docker.com/linux/centos/docker-ce.repo
        dest: /etc/yum.repos.d/docer-ce.repo

    - name: Install Docker
      package:
        name: docker-ce
        state: latest
    # Buraya kadar docker normal olarak kuruldu ve shellde calisabilir duzeyde..
    # Ancak asagida Ansibleda docker kullanimi icin gerekli python3-pip ve docker sdk'yi da kuruyoruz.
    # Docker sdk icin pip gerekiyor
    - name: Install pip
      package: 
        name: python3-pip
        state: present
        update_cache: true

    - name: Install docker sdk
      pip:
        name: docker
    # ec2 user'ini Docker grubuna ekledik..
    # append yes diger gruplardan cikarmadan islemi yapmasini saglar
    - name: Add user ec2-user to docker group
      user:
        name: ec2-user
        groups: docker
        append: yes
    # Docker'i enable edip calistiriyoruz
    - name: Start Docker service
      service:
        name: docker
        state: started
        enabled: yes
    # init sql dosyasini bir sonraki asamada gondermek icin bir folder olusturuyoruz
    # file modulu ile bir directory/folder olusturabiliyoruz
    - name: create build directory
      file:
        path: /home/ec2-user/postgresql
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: copy the sql script
      copy:
        src: /home/ec2-user/ansible-Project/postgres/init.sql
        dest: /home/ec2-user/postgresql

    - name: copy the Dockerfile
      copy:
        src: /home/ec2-user/ansible-Project/postgres/Dockerfile
        dest: /home/ec2-user/postgresql
    # Kuracagimiz container ve imajla ayni, yani daha once kurulmus varsa daha onceki container ve imajlarin silinmesini sagliyoruz
    - name: remove serdar_postgre container and serdarcw/postgre if exists
      shell: "docker ps -q --filter 'name=serdar_postgre' | grep -q . && docker stop serdar_postgre && docker rm -fv serdar_postgre && docker image rm -f serdarcw/postgre || echo 'Not Found'"

    - name: build container image
      docker_image:
        name: serdarcw/postgre
        build:
          path: /home/ec2-user/postgresql
        source: build
        state: present

    - name: Launch postgresql docker container
      docker_container:
        name: serdar_postgre
        image: serdarcw/postgre
        state: started
        ports: 
        - "5432:5432"
        # Postgre'nin Default exposed portu 5432 olarak tanimli, latest imajdan EXPOSE: 5432 
        # ilk kisimdaki 5432 Host icin, istedigimiz sekilde sec-gropus'tan belirtebiliriz.
        env:
          POSTGRES_PASSWORD: "Pp123456789"
        volumes:
          - /custom/mount:/var/lib/postgresql/data
      register: docker_info
